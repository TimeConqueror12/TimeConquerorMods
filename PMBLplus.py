import logging
from telethon.tl.types import Message, PeerUser
from telethon.tl.functions.contacts import BlockRequest
from telethon.utils import get_display_name

from .. import loader, utils

logger = logging.getLogger(__name__)

@loader.tds
class PMBLplusMod(loader.Module):
    """–î–æ–ø. –º–æ–¥ –¥–ª—è PMBL. —Å–º. –∫–æ–Ω—Ñ–∏–≥."""

    strings = {
        "name": "PMBLplus",
        "flood_banned": "<emoji document_id=5210952531676504517>‚ùå</emoji> <b>–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}</b> —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.",
        "phrase_added": "<emoji document_id=5397916757333654639>‚ûï</emoji> <b>–§—Ä–∞–∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.</b>",
        "phrase_removed": "<emoji document_id=5206607081334906820>‚úîÔ∏è</emoji> <b>–§—Ä–∞–∑–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.</b>",
        "no_phrases": "<emoji document_id=5447644880824181073>‚ö†Ô∏è</emoji> <b>–°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø—É—Å—Ç.</b>",
        "current_phrases": "<emoji document_id=5334882760735598374>üìù</emoji> <b>–¢–µ–∫—É—â–∏–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏:</b>\n{}",
        "args_flood": "<emoji document_id=5240241223632954241>üö´</emoji> <b>–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b> <code>.pmblfloodadd —Ñ—Ä–∞–∑–∞</code>",
        "blocked_user": "<emoji document_id=5240241223632954241>üö´</emoji> <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ.</b>",
        "not_blocked": "<emoji document_id=5274099962655816924>‚ùóÔ∏è</emoji> <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º.</b>",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "forbidden_phrases",
                [],
                lambda: "–°–ø–∏—Å–æ–∫ –±–∞–Ω–≤–æ—Ä–¥–æ–≤",
                validator=loader.validators.Series(loader.validators.String()),
            ),
            loader.ConfigValue(
                "moderate_flood",
                True,
                lambda: "–ú–æ–¥–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è?",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "dialog_min_msg",
                1,
                lambda: "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n–°–æ–∑–¥–∞–Ω–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–∫—Ä–∏–ø—Ç –Ω–µ —Ç—Ä–æ–≥–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —É–∂–µ –±—ã–ª –¥–∏–∞–ª–æ–≥.",
                validator=loader.validators.Integer(minimum=1),
            ),
            loader.ConfigValue(
                "block_user",
                True,
                lambda: "–ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏?",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "custom_response",
                "None",
                lambda: "–ö–∞—Å—Ç–æ–º–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏",
                validator=loader.validators.String(),
            ),
        )

    async def addwordcmd(self, message: Message):
        """–í—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â–∏–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ"""
        args = utils.get_args_raw(message)
        
        if not args:
            phrases = self.config["forbidden_phrases"]
            if phrases:
                await utils.answer(message, self.strings("current_phrases").format("\n".join(f"- {p}" for p in phrases)))
            else:
                await utils.answer(message, self.strings("no_phrases"))
            return
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ—Ä–∞–∑—ã
        phrases = self.config["forbidden_phrases"]
        if args not in phrases:
            phrases.append(args)
            self.set("forbidden_phrases", phrases)
            await utils.answer(message, self.strings("phrase_added"))
        else:
            await utils.answer(message, f"<emoji document_id=5447644880824181073>‚ö†Ô∏è</emoji> <b>–§—Ä–∞–∑–∞ '{args}' —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞.</b>")
    
    async def rmwordcmd(self, message: Message):
        """–£–¥–∞–ª—è–µ—Ç —Ñ—Ä–∞–∑—É –∏–∑ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        args = utils.get_args_raw(message)
        phrases = self.config["forbidden_phrases"]
        
        if args in phrases:
            phrases.remove(args)
            self.set("forbidden_phrases", phrases)
            await utils.answer(message, self.strings("phrase_removed"))
        else:
            await utils.answer(message, f"<emoji document_id=5447644880824181073>‚ö†Ô∏è</emoji> <b>–§—Ä–∞–∑–∞ '{args}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ.</b>")

    async def watcher(self, message: Message):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —É–¥–∞–ª—è–µ—Ç –∏—Ö, –µ—Å–ª–∏ –æ–Ω–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã"""
        if not self.config["moderate_flood"]:
            return

        if (
            getattr(message, "out", False)
            or not isinstance(message, Message)
            or not isinstance(message.peer_id, PeerUser)
        ):
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏–∞–ª–æ–≥–µ
        peer_id = message.peer_id
        message_count = 0

        async for msg in self._client.iter_messages(peer_id, limit=100):
            if msg.sender_id == self._tg_id or msg.sender_id == message.sender_id:
                message_count += 1
            if message_count >= self.config["dialog_min_msg"]:
                return  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ–ª—å—à–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –º–æ–¥–µ—Ä–∞—Ü–∏—é

        forbidden_phrases = self.config["forbidden_phrases"]
        if any(phrase.lower() in message.raw_text.lower() for phrase in forbidden_phrases):
            await message.delete()
            custom_response = self.config["custom_response"]
            await utils.answer(message, f"<b>{custom_response}</b>")

            if self.config["block_user"]:
                await self._client(BlockRequest(id=message.sender_id))
                await utils.answer(message, self.strings("blocked_user").format(get_display_name(message.sender)))
            else:
                await utils.answer(message, self.strings("not_blocked"))
